import streamlit as st

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from core.llm import get_llm
from core.config import OPENROUTER_API_KEY, MODEL_NAME, PROMPTS
from core.db import get_vector_store, retrieve, rerank
from core.llm.chains import get_qa_chain, format_docs
from core.modules.ranking import get_reranker

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π
DEFAULT_MODEL = MODEL_NAME
# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
AVAILABLE_MODELS_LIST = [
    "qwen/qwen3-235b-a22b", 
    "qwen/qwen3-32b", 
    "qwen/qwen3-14b",
    "google/gemini-2.5-flash-preview",
    "google/gemini-2.0-flash-001",
    "google/gemma-3-27b-it",
    "google/gemma-3-12b-it",
    "meta-llama/llama-4-maverick",
    "meta-llama/llama-3.1-405b-instruct",
    "meta-llama/llama-3.3-70b-instruct"
]

def main():
    st.set_page_config(page_title="RAG Demo", page_icon="ü§ñ", layout="wide")
    
    st.title("üîç RAG –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    st.markdown("""
    –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞ Retrieval Augmented Generation (RAG) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
    - **FAISS** –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    - **Reranker** –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    - **OpenRouter** –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —è–∑—ã–∫–æ–≤—ã–º –º–æ–¥–µ–ª—è–º
    """)
    
    if not OPENROUTER_API_KEY:
        st.error("OpenRouter API Key –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OPENROUTER_API_KEY –≤ .env —Ñ–∞–π–ª–µ.")
        return
    
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º st.selectbox –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", AVAILABLE_MODELS_LIST, 
                                      index=AVAILABLE_MODELS_LIST.index(DEFAULT_MODEL) if DEFAULT_MODEL in AVAILABLE_MODELS_LIST else 0)
        temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", min_value=0.0, max_value=1.0, value=0.7, step=0.1)
        
        with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è"):
            use_reranker = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å reranker", value=True)
            k_retriever = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", min_value=10, max_value=200, value=100, step=10)
            k_reranker = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è", min_value=1, max_value=20, value=5, step=1)
        
        try:
            vector_store = get_vector_store()
            st.success("–í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
            if hasattr(vector_store, 'index') and hasattr(vector_store.index, 'ntotal'):
                st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {vector_store.index.ntotal}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {str(e)}")
        
        if use_reranker:
            try:
                reranker = get_reranker()
                if reranker:
                    st.success("Reranker —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                else:
                    st.warning("Reranker –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ reranker: {str(e)}")
    
    query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ?")
    
    col1, col2 = st.columns([2, 3])
    
    if query:
        final_docs_for_display_and_context = []
        # --- –®–∞–≥ 1: –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π Retrieve –∏ Rerank ---
        with st.spinner("–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ UI (k_retriever)
                retrieved_docs = retrieve(query, top_k=k_retriever)
                st.info(f"–ù–∞–π–¥–µ–Ω–æ {len(retrieved_docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º –ø–æ–∏—Å–∫–µ.")
                
                final_docs_for_display_and_context = retrieved_docs
                if use_reranker:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ UI (k_reranker)
                    final_docs_for_display_and_context = rerank(query, retrieved_docs, top_k=k_reranker)
                    st.success(f"–û—Ç–æ–±—Ä–∞–Ω–æ {len(final_docs_for_display_and_context)} –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è.")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
                final_docs_for_display_and_context = [] # –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞

        # --- –®–∞–≥ 2: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ col1 ---
        with col1:
            st.subheader("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
            if not final_docs_for_display_and_context and query: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç
                 st.warning("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
            elif final_docs_for_display_and_context:
                for i, doc in enumerate(final_docs_for_display_and_context):
                    with st.expander(f"–î–æ–∫—É–º–µ–Ω—Ç {i+1}"):
                        st.write("**–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:**")
                        for key, value in doc.metadata.items():
                            st.write(f"- **{key}:** {value}")
                        st.write("**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:**")
                        st.write(doc.page_content)
        
        # --- –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ col2 ---
        with col2:
            st.subheader("–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏")
            if final_docs_for_display_and_context: # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
                with st.spinner(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {selected_model}..."): # –ò—Å–ø–æ–ª—å–∑—É–µ–º selected_model
                    try:
                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º LLM (—Å–∏–Ω–≥–ª—Ç–æ–Ω –æ–±–Ω–æ–≤–∏—Ç—Å—è)
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º selected_model –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏–∑ —Å–ª–∞–π–¥–µ—Ä–∞
                        get_llm(model_name=selected_model, temperature=temperature)
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É qa_chain
                        qa_chain = get_qa_chain()
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –û–î–ò–ù–ê–ö–û–í–´–• –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                        formatted_context = format_docs(final_docs_for_display_and_context)
                        
                        response = qa_chain.invoke({
                            "context": formatted_context,
                            "question": query
                        })
                        st.markdown(response)
                        
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            elif query: # –ï—Å–ª–∏ –±—ã–ª –∑–∞–ø—Ä–æ—Å, –Ω–æ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                st.warning("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.")

if __name__ == "__main__":
    main() 